const {
  DynamoDbSchema,
  DynamoDbTable,
  embed,
  DataMapper,
} = require("@aws/dynamodb-data-mapper");
const DynamoDB = require("aws-sdk/clients/dynamodb");
const tableName = process.env.POSTS_TABLE;

const { v4: v4 } = require("uuid");

class Post {
  // Declare methods and properties as usual
  @autoGeneratedHashKey()
  id: string;

  @rangeKey()
  createdAt: Date;

  @attribute()
  authorUsername: string;

  @attribute()
  title: string;
}

class PostMetadata {
  // Methods and properties
}

Object.defineProperty(PostMetadata.prototype, DynamoDbSchema, {
  value: {
    draft: { type: "Boolean" },
    tags: {
      type: "Set",
      memberType: "String",
    },
  },
});

Object.defineProperties(Post.prototype, {
  [DynamoDbTable]: {
    value: "Posts",
  },
  [DynamoDbSchema]: {
    value: {
      id: {
        type: "String",
        keyType: "HASH",
        defaultProvider: v4,
      },
      createdAt: {
        type: "Date",
        keyType: "RANGE",
      },
      authorUsername: { type: "String" },
      title: { type: "String" },
      metadata: embed(PostMetadata),
    },
  },
});

const client = new DynamoDB({ region: "us-east-1" });
const mapper = new DataMapper({ client });

const post = new Post();
post.createdAt = new Date();
post.authorUsername = "User1";
post.title = "Hello, DataMapper";
post.metadata = Object.assign(new PostMetadata(), {
  draft: true,
  tags: new Set(["greeting", "introduction", "en-US"]),
});

mapper.put({ item: post }).then(() => {
  // The post has been created!
  console.log(post.id);
});

// Create a response
function response(statusCode, message) {
  return {
    statusCode: statusCode,
    body: JSON.stringify(message),
  };
}
function sortByDate(a, b) {
  if (a.createdAt > b.createdAt) {
    return -1;
  } else return 1;
}
// Create a post
module.exports.createPost = (event, context, callback) => {};
// Get all posts
module.exports.getAllPosts = (event, context, callback) => {};
// Get a single post
module.exports.getPost = (event, context, callback) => {};
